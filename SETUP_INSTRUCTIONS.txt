# React + Supabase Setup Instructions

Follow these steps to create a React app connected to Supabase and display data from a table.

---

## 1. Create a New React App

Open a terminal and run:
```
npx create-react-app supabase-react-app --template cra-template-pwa --use-npm
```

---

## 2. Install Supabase Client

Navigate into your project directory:
```
cd supabase-react-app
```
Install the Supabase JavaScript client:
```
npm install @supabase/supabase-js
```

---

## 3. Get Your Supabase Project Details

- Go to https://app.supabase.com/, create a project if you haven't already.
- In your project, go to **Project Settings â†’ API**.
- Copy your **Project URL** and **anon public key**.

---

## 4. Create a Table in Supabase

- In the Supabase dashboard, go to the **Table Editor**.
- Click **New Table** and name it (e.g., `test_table`).
- Add columns (e.g., `id` as UUID or integer, `created_at` as timestamp, `content` as text).
- Save the table.
- Add a couple of rows for testing.

---

## 5. Enable Row Level Security (RLS) and Add a Policy

- In the Table Editor, select your table.
- Go to the **RLS** tab.
- If RLS is enabled, add a policy:
  - Click **New Policy**.
  - Use the template: "Enable read access to everyone".
  - Save the policy.

---

## 6. Connect Supabase to Your React App

Open `src/App.js` and add the following at the top:
```js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'YOUR_SUPABASE_URL';
const supabaseAnonKey = 'YOUR_SUPABASE_ANON_KEY';
const supabase = createClient(supabaseUrl, supabaseAnonKey);
```

---

## 7. Fetch and Display Data

Replace the contents of `App.js` with code to fetch and display your table data.  
Here's a simple example for a table view:
```jsx
import React, { useEffect, useState } from 'react';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'YOUR_SUPABASE_URL';
const supabaseAnonKey = 'YOUR_SUPABASE_ANON_KEY';
const supabase = createClient(supabaseUrl, supabaseAnonKey);

function App() {
  const [data, setData] = useState([]);
  const [error, setError] = useState(null);

  const fetchData = async () => {
    const { data, error } = await supabase.from('test_table').select('*');
    setData(data || []);
    setError(error ? error.message : null);
  };

  useEffect(() => {
    fetchData();
  }, []);

  return (
    <div>
      <h3>Supabase test_table Table:</h3>
      <button onClick={fetchData}>Refresh Data</button>
      {error && <div style={{ color: 'red' }}>Error: {error}</div>}
      {data.length > 0 ? (
        <table>
          <thead>
            <tr>
              {Object.keys(data[0]).map((key) => (
                <th key={key}>{key}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {data.map((row, idx) => (
              <tr key={idx}>
                {Object.values(row).map((value, i) => (
                  <td key={i}>{String(value)}</td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <div>No data found.</div>
      )}
    </div>
  );
}

export default App;
```
Replace `YOUR_SUPABASE_URL` and `YOUR_SUPABASE_ANON_KEY` with your actual values.

---

## 8. Start Your App

In your project directory, run:
```
npm start
```
Open http://localhost:3000 in your browser.

---

## 9. (Optional) Debugging

If you don't see data:
- Check for errors in the browser or terminal.
- Make sure RLS policy allows reading.
- Make sure you're using the correct table name and project keys.

---

You now have a React app connected to Supabase, fetching and displaying data from your table! 